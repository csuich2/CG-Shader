struct output {
	float4 color	: COLOR;
	float  depth	: DEPTH;
};

output main(float3 position : TEXCOORD0,
			float3 normal	: TEXCOORD1,
			uniform float4x4 modelViewProj : state.matrix.mvp,
			uniform float3   lightAmbient  : state.light[0].ambient,
			uniform float3   lightDiffuse  : state.light[0].diffuse,
			uniform float3   lightSpecular : state.light[0].specular,
			uniform float3	 lightPosition : state.light[0].position,
			uniform float3	 eyePosition,
			uniform float3	 Ka : state.material.ambient,
			uniform float3	 Kd : state.material.diffuse,
			uniform float3	 Ks : state.material.specular,
			uniform float	 shininess : state.material.shininess) {
	output OUT;

	float3 P = position.xyz;
	float3 N = normal;

	// Ambient
	float3 ambient = Ka * lightAmbient;

	// Diffuse
	float3 L = normalize(lightPosition - P);
	float diffuseLight = max(dot(N, L), 0);
	float3 diffuse = Kd * lightDiffuse * diffuseLight;

	// Specular
	float3 V = normalize(eyePosition - P);
	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(N, H), 0), shininess);
	if (diffuseLight <= 0) specularLight = 0;
	float3 specular = Ks * lightSpecular * specularLight;

	OUT.color.rgb = ambient + diffuse + specular;
	OUT.color.a = 1;
	OUT.depth = length(position.xyz - eyePosition)/100;

	return OUT;
}